---
- name: the main playbook to be executed 

  vars_files:
    - vars_defaults.yml
    - vars_aws_config.yml
    # HOST_TO_REPLACE: 

  hosts: "{{HOST_TO_REPLACE}}"
  become: true

  tasks:
    # STEP-1: to save the groups of target host to a json file.
    # block local machine start 
   - name: block executing in local machine as un-privileged user
     block:
     - name: copy the groups the host belongs to a json file in local machine 
       copy:
         content: "{ \"hosts_group\" : {{  BELONG_TO_GROUPS | to_json }} }"
         dest: "{{  OUTPUT_DIRECTORY  }}/groups.json"
     - debug:
         msg: "the ouput saved is { \"hosts_group\" : {{  BELONG_TO_GROUPS | to_json }} }" 
     connection: local
     become: False
     run_once: True 
     rescue:
       - debug:
           msg: 'I caught an error, can do stuff here to fix it, :-)'
    

    # STEP-2 A: get the configuration and keys to the target ec2 instance 
    # block to install dependencies for aws in remote host  
   - name: block executing in remote machine as privileged user
     block:
     - name: check/install python3 and pip on the server
       apt:
         update_cache: yes
         state: present 
         name: [python3, python3-pip]

     - name: install boto3 using pip 
       pip: 
         name: boto3
         state: present

    # block to collect information of aws ec2 instance   
   - name: collect information about target ec2 instance.
     block:
     - name: collect facts about the instance using ec2 module
       ec2_instance_facts:
         aws_access_key: "{{  AWS_ACCESS_KEY  }}"
         aws_secret_key: "{{  AWS_SECRET_KEY  }}"
         region: "{{  AWS_REGION  }}"
       register: current_instance_facts
    
    # this block saves the above response to a file in output folder 
   - name: block executing in local machine as un-privileged user
     block:
     - name: copy the ec2 facts a json file in local machine 
       copy:
         content: "{{ current_instance_facts.instances[0] | to_yaml }}"
         dest: "{{  OUTPUT_DIRECTORY  }}/instance_facts.yml"
     - debug: msg="response saved to file instance_facts.yml \n{{current_instance_facts.instances[0]  }}"

     connection: local
     become: False
     run_once: True 
     rescue:
       - debug:
           msg: 'I caught an error, can do stuff here to fix it, :-)'


    # STEP-2 B: copy the keys file from the target host to local machine. 
    # block to copy keys from remote host to control machine  
   - name: block executing in remote machine as un-privileged user
     block:
     - name: copy the authorized_keys file to outputs directory
       fetch:
         src: ~/.ssh/authorized_keys
         dest: "{{  OUTPUT_DIRECTORY  }}/authorized_keys"
         flat: yes
     become: False
     run_once: True
     rescue:
       - debug:
           msg: 'I caught an error, can do stuff here to fix it, :-)' 
   
   
      
...